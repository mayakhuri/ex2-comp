/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal GT;
terminal LT;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal COMMA;
terminal EXTENDS;
terminal NIL;
terminal ARRAY;
terminal CLASS;
terminal RETURN;
terminal NEW;

/*************/
/* VALUED TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;



/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROG program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_DEC_VAR vardec;
non terminal AST_ARRAY_TYPEDEF arrayTypedef;
non terminal AST_DEC_CLASS calssdec;
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_NEW_EXP newEXP;
non terminal AST_CFIELD cField;
non terminal AST_EXP_BINOP BINOP;



/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence ASSIGN;
precedence left equals;
precedence left GT;
precedence left LT;
precedence LBRACK;
precedence LPAREN;
precedence left DOT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/
program		::=		dec:d	program:p		{: RESULT = new AST_PROG(d,p);    :}
					| dec:d				{: RESULT = new AST_DEC(d); :}
					;

dec 			::= vardec:vd {: RESULT = new AST_DEC_VAR(vd); :}
 						| funcdec:fd {: RESULT = new AST_DEC_FUNC(fd);:}
						| calssdec:cd {: RESULT = new AST_DEC_CLASS(cd);:}
						| arrayTypedef:atd {: RESULT = new AST_ARRAY_TYPEDEF(atd);:}
						;


type			::=	TYPE_INT		{: RESULT = new AST_TYPE("int"); :}
					| TYPE_STRING		{: RESULT = new AST_TYPE("string"); :} 
					| TYPE_VOID		{: RESULT = new AST_TYPE("void"); :}
					| ID:i 			{: RESULT = new AST_TYPE(i); :}
					;



					
vardec	::=		type:t	ID:name SEMICOLON{: RESULT = new AST_DEC_VAR(t,name);    :}
					| type:t	ID:name ASSIGN exp:e SEMICOLON {: RESULT = new AST_DEC_VAR(t,name,e);    :}
					;
					
//complete
funcdec	::=		type:t	ID:name LPAREN		{: RESULT = new AST_DEC_VAR(t,name);    :}
					| type:t	ID:name ASSIGN exp:e {: RESULT = new AST_DEC_VAR(t,name,e);    :}
					;
//complete
classdec	::=		type:t	ID:name		{: RESULT = new AST_DEC_VAR(t,name);    :}
					| type:t	ID:name ASSIGN exp:e {: RESULT = new AST_DEC_VAR(t,name,e);    :}
					;

arrayTypedef	::=		ARRAY	ID:name	EQ type:t LBRACK RBRACK SEMICOLON	{: RESULT = new AST_ARRAY_TYPEDEF(name,t);:}
					;


exp			::=
					var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 BINOP:b  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, b, e2);:}
					|LPAREN exp:e RPAREN					{: RESULT = new AST_EXP_EXP(e);:}
					|var:v DOT LPAREN exp:e RPAREN					{: RESULT = new AST_EXP_EXP(e);:}
					;

var			::= ID:name  {: RESULT = new AST_EXP_VAR(name);:}
					| var:v DOT ID:name {: RESULT = new AST_EXP_VAR(v,name);:}
					| var:v LBRACK exp:e RBRACK {: RESULT = new AST_EXP_VAR(v,exp);:}
									
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					;


