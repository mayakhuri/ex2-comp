/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal GT;
terminal LT;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal COMMA;
terminal EXTENDS;
terminal NIL;
terminal ARRAY;
terminal CLASS;
terminal RETURN;
terminal NEW;

/*************/
/* VALUED TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;



/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROG program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_DEC_VAR vardec;
non terminal AST_ARRAY_TYPEDEF arrayTypedef;
non terminal AST_DEC_CLASS calssdec;
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_NEW_EXP newEXP;
non terminal AST_CFIELD cField;
non terminal AST_EXP_BINOP BINOP;
non terminal AST_COMMA_ID commaID;
non terminal AST_M_STMT mstmt;
non terminal AST_CXP cxp;
non terminal AST_CLASS_DEC classDec ;
non terminal AST_CFIELDS_LIST cFieldsList;
non terminal AST_CFIELD cField;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence ASSIGN;
precedence left equals;
precedence left GT;
precedence left LT;
precedence LBRACK;
precedence LPAREN;
precedence left DOT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

//completed
program		::=		dec:d	program:p		{: RESULT = new AST_PROG(d,p);    :}
					| dec:d				{: RESULT = new AST_PROG(d,null); :}
					;

//completed
dec 			::= vardec:vd {: RESULT = new AST_DEC_VAR(vd); :}
 						| funcdec:fd {: RESULT = new AST_DEC_FUNC(fd);:}
						| calssdec:cd {: RESULT = new AST_DEC_CLASS(cd);:}
						| arrayTypedef:atd {: RESULT = new AST_ARRAY_TYPEDEF(atd);:}
						;


type			::=	TYPE_INT		{: RESULT = new AST_TYPE("int"); :}
					| TYPE_STRING		{: RESULT = new AST_TYPE("string"); :} 
					| TYPE_VOID		{: RESULT = new AST_TYPE("void"); :}
					| ID:i 			{: RESULT = new AST_TYPE(i); :}
					;



					
vardec ::= type:t ID:name SEMICOLON {: RESULT = new AST_DEC_VAR(t, name); :}
         | type:t ID:name ASSIGN exp:e SEMICOLON {: RESULT = new AST_DEC_VAR(t, name, e); :}
         | type:t ID:name ASSIGN newExp:ne SEMICOLON {: RESULT = new AST_DEC_VAR(t, name, ne); :};

					
//complete

commaID	::= COMMA type:t ID:name {: RESULT = new AST_COMMA_ID(t,name);   :}
					| commaID:ci COMMA type:t ID:name {: RESULT = new AST_COMMA_ID (ci,t,name);   :}

mstmt ::= 			stmt:s {: RESULT = new AST_M_STMT(s,null);   :} //(stmt)*
					| mstmt:m stmt:s {: RESULT = new AST_M_STMT(s,m);   :}
				;

funcdec ::= type:t ID:name LPAREN RPAREN LBRACE mstmt:s RBRACE 
              {: RESULT = new AST_DEC_FUNC(t, name, s); :}
          | type:t1 ID:name1 LPAREN type:t2 ID:name2 RPAREN LBRACE mstmt:s RBRACE 
              {: RESULT = new AST_DEC_FUNC(t1, new AST_COMMA_ID(t2, name2), name1, s); :}
          | type:t1 ID:name1 LPAREN type:t2 ID:name2 commaID:ci RPAREN LBRACE mstmt:s RBRACE 
              {: RESULT = new AST_DEC_FUNC(t1, new AST_COMMA_ID(t2, name2, ci), name1, s); :}
          | type:t ID:name LPAREN RPAREN LBRACE RBRACE 
              {: RESULT = new AST_DEC_FUNC(t, name); :}
          | type:t1 ID:name1 LPAREN type:t2 ID:name2 RPAREN LBRACE RBRACE 
              {: RESULT = new AST_DEC_FUNC(t1, new AST_COMMA_ID(t2, name2), name1); :}
          | type:t1 ID:name1 LPAREN type:t2 ID:name2 commaID:ci RPAREN LBRACE RBRACE 
              {: RESULT = new AST_DEC_FUNC(t1, new AST_COMMA_ID(t2, name2, ci), name1); :};




classDec ::= CLASS ID:id LBRACE cFieldsList:cbody RBRACE 
             {: RESULT = new AST_CLASS_DEC(id, null, cbody); :}
          | CLASS ID:id1 EXTENDS ID:id2 LBRACE cFieldsList:cbody RBRACE 
             {: RESULT = new AST_CLASS_DEC(id1, id2, cbody); :};

					
cFieldsList ::= cField:cf cFieldsList:cfls {: RESULT = new AST_CFIELDS_LIST(cf, cfls); :}
             | cField:cf               {: RESULT = new AST_CFIELDS_LIST(cf, null); :};

cField		::=		varDec:vd {: RESULT = new AST_CFIELD(vd); :}
					| funcDec:fd {: RESULT = new AST_CFIELD(fd); :}	
					;


arrayTypedef	::=		ARRAY	ID:name	EQ type:t LBRACK RBRACK SEMICOLON	{: RESULT = new AST_ARRAY_TYPEDEF(name,t);:}
					;


exp ::= var:v {: RESULT = new AST_EXP_VAR(v); :}
      | LPAREN exp:e RPAREN {: RESULT = new AST_EXP_EXP(e); :}
      | exp:e1 BINOP:b exp:e2 {: RESULT = new AST_EXP_BINOP(e1, b, e2); :}
      | var:v DOT ID:id LPAREN exp:e cxp:c RPAREN {: RESULT = new AST_EXP_EXP(v, id, e, c); :}
      | MINUS INT:i {: RESULT = new AST_EXP_INT(-i); :}
      | NIL {: RESULT = new AST_EXP_NIL(); :}
      | STRING:s {: RESULT = new AST_EXP_STRING(s); :};

newExp		::=		NEW type:t {: RESULT = new AST_NEW_EXP(t, null); :}
					| NEW type:t LBRACK exp:e RBRACK {: RESULT = new AST_NEW_EXP(t, e); :}
					
cxp         	::=		COMMA exp:e {: RESULT = new AST_EXP_EXP(e);:}
					|cxp:c COMMA exp:e {: RESULT = new AST_CXP(c,e);:}
					

var			::= ID:name  {: RESULT = new AST_EXP_VAR(name);:}
					| var:v DOT ID:name {: RESULT = new AST_EXP_VAR(v,name);:}
					| var:v LBRACK exp:e RBRACK {: RESULT = new AST_EXP_VAR(v,exp);:}
//done								
stmt		::=		vardec:d  						{: RESULT = new AST_STMT_VARDEC(d); :}
					|var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					|var:v ASSIGN newExp:e SEMICOLON								{: RESULT = new AST_STMT_NEW_ASSIGN(v,e); :}
					|RETURN exp:e SEMICOLON							{: RESULT = new AST_STMT_RETURN(e);:}
					|RETURN SEMICOLON							{: RESULT = new AST_STMT_RETURN();:}
				//////////////////////////////////////////////////////////////////////
					| IF    LPAREN exp:e RPAREN LBRACE mstmt:body RBRACE	{: RESULT = new AST_STMT_IF(e,body); :}
					| WHILE LPAREN exp:e RPAREN LBRACE mstmt:body RBRACE	{: RESULT = new AST_STMT_WHILE(e,body); :}
					| var:v DOT ID:id LPAREN RPAREN	SEMICOLON		{: RESULT =	new AST_STMT_CALL(v,id);:}
					| var:v DOT ID:id LPAREN exp:e cxp:c RPAREN	SEMICOLON			{: RESULT = new AST_STMT_CALL(v,id,e,c);:}
					| var:v DOT ID:id LPAREN exp:e RPAREN SEMICOLON					{: RESULT = new AST_STMT_CALL(v,id,e);:}
					| ID:id LPAREN RPAREN	SE.MICOLON		{: RESULT =	new AST_STMT_CALL(id);:}
					| ID:id LPAREN exp:e cxp:c RPAREN	SEMICOLON			{: RESULT = new AST_STMT_CALL(id,e,c);:}
					| ID:id LPAREN exp:e RPAREN SEMICOLON					{: RESULT = new AST_STMT_CALL(id,e);:}
					;

//complete
BINOP ::= 	PLUS {: RESULT = new AST_BINOP(0); :}
					| MINUS {: RESULT = new AST_BINOP(1); :}
					| TIMES {: RESULT = new AST_BINOP(2); :}
					| DIVIDE {: RESULT = new AST_BINOP(3); :}
					| LT {: RESULT = new AST_BINOP(4); :}
					| GT {: RESULT = new AST_BINOP(5); :}
					| EQ {: RESULT = new AST_BINOP(6); :}
					;
		



